plugins {
    id 'java'
    id 'io.quarkus'
    id "org.sonarqube" version "3.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    //RestEasy para criarmos as APIs
    implementation 'io.quarkus:quarkus-resteasy'

    //Dependencia do Postgres
    implementation 'io.quarkus:quarkus-jdbc-postgresql'

    //Para usarmos json em nossas APIs
    implementation 'io.quarkus:quarkus-resteasy-jsonb'

    //OpenApi para criarmos a documentacao da API Swagger
    implementation 'io.quarkus:quarkus-smallrye-openapi'

    //Para fazer a validacao dos dados da API, o @Valid funcionar
    implementation 'io.quarkus:quarkus-hibernate-validator'

    //Para usarmos o panache de orm
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'

    //Para usar application.yml
    implementation 'io.quarkus:quarkus-config-yaml'

    //Health checker
    implementation 'io.quarkus:quarkus-smallrye-health'

    //Microprofile jwt
    implementation 'io.quarkus:quarkus-smallrye-jwt'

    //Open Tracing
    implementation 'io.quarkus:quarkus-smallrye-opentracing'
    //Lib para que seja pego o tracing do banco de dados, com as queries, etc.
    implementation 'io.opentracing.contrib:opentracing-jdbc'



    // Test

    //Junit 5 (Padr√£o)
    testImplementation 'io.quarkus:quarkus-junit5'

    //Rest assured para testar as chamadas das APIS
    testImplementation 'io.rest-assured:rest-assured'

    //Test Containers para subir os containers de teste
    testCompile "org.testcontainers:postgresql:1.14.3"


    //Database rider para ler os "Datasets" e inserir na base de teste
    testImplementation 'com.github.database-rider:rider-core:1.13.0'
    testImplementation 'com.github.database-rider:rider-cdi:1.13.0'

    //O database rider precisa desta dependencia para funcionar
    testImplementation 'stax:stax:1.2.0'

    //Utilizado para validar o Json de retorno da nossa API nos testes.
    testImplementation 'com.approvaltests:approvaltests:4.0.2'
    //Precisamos o google Gson para queo approvaltests funcione.
    testImplementation 'com.google.code.gson:gson:2.8.6'


    //Map struct
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

}


group 'com.wallace'
version '0.0.1-SNAPSHOT'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}


sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src"
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.projectKey", "${rootProject.group}:${rootProject.name}"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.coverage.exclusions", [
        ]
        property "sonar.exclusions", [


        ]
    }
}


project.tasks["sonarqube"].dependsOn test
